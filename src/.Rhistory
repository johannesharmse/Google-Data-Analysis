ylim = c(min(lat_breaks), max(lat_breaks)),
geom="blank") +
annotation_custom(ggmapdata, xmin=-Inf, xmax=Inf, ymin=-Inf, ymax=Inf)
temp_filt <- location_summary
start = 1
start_plot = 1
lat_start = 0
long_start = 0
# plot_seq <- seq(period, nrow(temp_filt), 1)
temp = data_frame()
p <- ggmapdata
print(p)
if (plot_period == "daily"){
for (count in 1:nrow(temp_filt)){
if(interval(temp_filt$time[start], temp_filt$time[count])/ddays(1) >= 1){
searches <- paste(browse_summary$title)
p <- ggmapdata +
geom_point(data = temp_filt[1:count, ], aes(x = long,
y = lat),
fill = "light blue", size = 2,
alpha = alpha,
colour = "blue") +
geom_point(data = temp_filt[count, ], aes(x = long,
y = lat),
alpha = 0.5, fill = "red", size = 3, colour = "red")
print(p)
start = count
}
}
}else if (plot_period == "weekly"){
for (count in 2:nrow(temp_filt)){
if(interval(temp_filt$time[start], temp_filt$time[count])/dweeks(1) >= 1){
word_occurances <- unlist(browse_summary %>%
filter(time >= temp_filt$time[start] &
time <= temp_filt$time[count] &
words %in% top_words$Var1) %>%
select(words))
word_occurances <- data_frame(words = word_occurances)
# word_occurances <- unlist(word_occurances)
# word_occurances_freq <- as_data_frame(table(word_occurances[word_occurances %in% top_words]))
p <- ggmapdata +
geom_point(data = temp_filt[1:count, ], aes(x = long,
y = lat),
fill = "light blue", size = 2, alpha = alpha,
colour = "blue") +
geom_point(data = temp_filt[count, ], aes(x = long,
y = lat),
alpha = 0.5, fill = "red", size = 3, colour = "red")
word_freq <- ggplot(data = word_occurances, aes(x = words)) +
geom_bar() +
theme(axis.ticks.x =element_blank(), axis.text.x=element_blank())
p <- plot_grid(p, word_freq, ncol = 2)
print(word_freq)
start = count
}
}
}else if (plot_period == "annually"){
for (count in 1:nrow(temp_filt)){
if(interval(temp_filt$time[start], temp_filt$time[count])/dyears(1) >= 1){
p <- ggmapdata +
geom_point(data = temp_filt[1:count, ], aes(x = long,
y = lat),
fill = "light blue", size = 2, alpha = alpha,
colour = "blue") +
geom_point(data = temp_filt[count, ], aes(x = long,
y = lat),
alpha = 0.5, fill = "red", size = 3, colour = "red")
print(p)
start = count
}
}
}
View(temp_filt)
temp_filt$time[start]
browse_summary$time[``]
browse_summary$time[1]
stop_words <- read_csv(stop_words_url)
# filter for Google Search and cleaning
browse_summary <- browse_summary %>%
filter(str_detect(title, " - Google Search$")) %>%
mutate(title = str_sub(title, 1, str_locate(title, " - Google Search")[ ,1] - 1)) %>%
distinct(ymd = str_sub(time, 1, 13), title, .keep_all = TRUE) %>%
group_by(time) %>%
mutate(words = list(words = unlist(str_split(title, pattern = " "))[!(unlist(str_split(title, pattern = " ")) %in% unlist(stop_words$words))]),
ymd = NULL)
top_words <- as_data_frame(table(unlist(browse_summary$words))) %>%
top_n(n, n = n_words)
# top_n(10, beta) %>%
# ungroup() %>%
# arrange(topic, -beta)
# location_summary <- location_summary
mapData <- get_googlemap(location, zoom = zoom)
borders <- attr(mapData, which = "bb")
if (borders$ll.lon == borders$ur.lon){
borders$ll.lon == borders$ll.lon - 0.05
borders$ur.lon == borders$ur.lon + 0.05
}else{
borders$ll.lat == borders$ll.lat - 0.05
borders$ur.lat == borders$ur.lat + 0.05
}
location_summary <- location_summary %>%
filter(long <= borders$ur.lon &
long >= borders$ll.lon &
lat <= borders$ur.lat &
lat >= borders$ll.lat)
# zoom <- floor(10/max((max(location_summary$long) - min(location_summary$long)/(borders$ur.lon - borders$ll.lon)),
#              (max(location_summary$lat) - min(location_summary$lat))/(borders$ur.lat - borders$ll.lat)))
# center <- c(min(location_summary$long) + (max(location_summary$long) - min(location_summary$long))/2,
#            min(location_summary$lat) + (max(location_summary$lat) - min(location_summary$lat))/2)
center <- c(median(location_summary$long), median(location_summary$lat))
# mapData <- get_googlemap(center = center, zoom = zoom)
# borders <- attr(mapData, which = "bb")
mapplot <- ggmap(get_googlemap(center = center, zoom = zoom), extent = "device")
lon_breaks <- mapplot$data$lon
lat_breaks <- mapplot$data$lat
mapplot <- mapplot +
theme(axis.line=element_blank(),
axis.text.x=element_blank(),
axis.text.y=element_blank(),
axis.ticks=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank())
png(filename = "../results/base_map.png")
print(mapplot)
dev.off()
base_map <- readPNG(source = "../results/base_map.png")
ggmapdata <- rasterGrob(base_map, interpolate=TRUE)
ggmapdata <- qplot(x = lon_breaks,
y = lat_breaks,
xlim = c(min(lon_breaks), max(lon_breaks)),
ylim = c(min(lat_breaks), max(lat_breaks)),
geom="blank") +
annotation_custom(ggmapdata, xmin=-Inf, xmax=Inf, ymin=-Inf, ymax=Inf)
temp_filt <- location_summary
start = 1
start_plot = 1
lat_start = 0
long_start = 0
# plot_seq <- seq(period, nrow(temp_filt), 1)
temp = data_frame()
p <- ggmapdata
print(p)
if (plot_period == "daily"){
for (count in 1:nrow(temp_filt)){
if(interval(temp_filt$time[start], temp_filt$time[count])/ddays(1) >= 1){
searches <- paste(browse_summary$title)
p <- ggmapdata +
geom_point(data = temp_filt[1:count, ], aes(x = long,
y = lat),
fill = "light blue", size = 2,
alpha = alpha,
colour = "blue") +
geom_point(data = temp_filt[count, ], aes(x = long,
y = lat),
alpha = 0.5, fill = "red", size = 3, colour = "red")
print(p)
start = count
}
}
}else if (plot_period == "weekly"){
for (count in 2:nrow(temp_filt)){
if(interval(temp_filt$time[start], temp_filt$time[count])/dweeks(1) >= 1){
word_occurances <- unlist(browse_summary %>%
filter(time >= temp_filt$time[start] &
time <= temp_filt$time[count]) %>%
select(words))
word_occurances <- data_frame(words = word_occurances)
# word_occurances <- unlist(word_occurances)
# word_occurances_freq <- as_data_frame(table(word_occurances[word_occurances %in% top_words]))
p <- ggmapdata +
geom_point(data = temp_filt[1:count, ], aes(x = long,
y = lat),
fill = "light blue", size = 2, alpha = alpha,
colour = "blue") +
geom_point(data = temp_filt[count, ], aes(x = long,
y = lat),
alpha = 0.5, fill = "red", size = 3, colour = "red")
word_freq <- ggplot(data = word_occurances, aes(x = words)) +
geom_bar() +
theme(axis.ticks.x =element_blank(), axis.text.x=element_blank())
p <- plot_grid(p, word_freq, ncol = 2)
print(word_freq)
start = count
}
}
}else if (plot_period == "annually"){
for (count in 1:nrow(temp_filt)){
if(interval(temp_filt$time[start], temp_filt$time[count])/dyears(1) >= 1){
p <- ggmapdata +
geom_point(data = temp_filt[1:count, ], aes(x = long,
y = lat),
fill = "light blue", size = 2, alpha = alpha,
colour = "blue") +
geom_point(data = temp_filt[count, ], aes(x = long,
y = lat),
alpha = 0.5, fill = "red", size = 3, colour = "red")
print(p)
start = count
}
}
}
browse_summary <- readRDS(file = "../data/R_temp/browse_summary.rds")
location_summary <- readRDS(file = "../data/R_temp/location_summary.rds")
View(browse_summary)
stop_words <- read_csv(stop_words_url)
# filter for Google Search and cleaning
browse_summary <- browse_summary %>%
filter(str_detect(title, " - Google Search$")) %>%
mutate(title = str_sub(title, 1, str_locate(title, " - Google Search")[ ,1] - 1)) %>%
distinct(ymd = str_sub(time, 1, 13), title, .keep_all = TRUE) %>%
group_by(time) %>%
mutate(words = list(words = unlist(str_split(title, pattern = " "))[!(unlist(str_split(title, pattern = " ")) %in% unlist(stop_words$words))]),
ymd = NULL)
top_words <- as_data_frame(table(unlist(browse_summary$words))) %>%
top_n(n, n = n_words)
# top_n(10, beta) %>%
# ungroup() %>%
# arrange(topic, -beta)
# location_summary <- location_summary
mapData <- get_googlemap(location, zoom = zoom)
borders <- attr(mapData, which = "bb")
if (borders$ll.lon == borders$ur.lon){
borders$ll.lon == borders$ll.lon - 0.05
borders$ur.lon == borders$ur.lon + 0.05
}else{
borders$ll.lat == borders$ll.lat - 0.05
borders$ur.lat == borders$ur.lat + 0.05
}
location_summary <- location_summary %>%
filter(long <= borders$ur.lon &
long >= borders$ll.lon &
lat <= borders$ur.lat &
lat >= borders$ll.lat)
# zoom <- floor(10/max((max(location_summary$long) - min(location_summary$long)/(borders$ur.lon - borders$ll.lon)),
#              (max(location_summary$lat) - min(location_summary$lat))/(borders$ur.lat - borders$ll.lat)))
# center <- c(min(location_summary$long) + (max(location_summary$long) - min(location_summary$long))/2,
#            min(location_summary$lat) + (max(location_summary$lat) - min(location_summary$lat))/2)
center <- c(median(location_summary$long), median(location_summary$lat))
# mapData <- get_googlemap(center = center, zoom = zoom)
# borders <- attr(mapData, which = "bb")
mapplot <- ggmap(get_googlemap(center = center, zoom = zoom), extent = "device")
lon_breaks <- mapplot$data$lon
lat_breaks <- mapplot$data$lat
mapplot <- mapplot +
theme(axis.line=element_blank(),
axis.text.x=element_blank(),
axis.text.y=element_blank(),
axis.ticks=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank())
png(filename = "../results/base_map.png")
print(mapplot)
dev.off()
base_map <- readPNG(source = "../results/base_map.png")
ggmapdata <- rasterGrob(base_map, interpolate=TRUE)
ggmapdata <- qplot(x = lon_breaks,
y = lat_breaks,
xlim = c(min(lon_breaks), max(lon_breaks)),
ylim = c(min(lat_breaks), max(lat_breaks)),
geom="blank") +
annotation_custom(ggmapdata, xmin=-Inf, xmax=Inf, ymin=-Inf, ymax=Inf)
temp_filt <- location_summary
start = 1
start_plot = 1
lat_start = 0
long_start = 0
# plot_seq <- seq(period, nrow(temp_filt), 1)
temp = data_frame()
p <- ggmapdata
print(p)
if (plot_period == "daily"){
for (count in 1:nrow(temp_filt)){
if(interval(temp_filt$time[start], temp_filt$time[count])/ddays(1) >= 1){
searches <- paste(browse_summary$title)
p <- ggmapdata +
geom_point(data = temp_filt[1:count, ], aes(x = long,
y = lat),
fill = "light blue", size = 2,
alpha = alpha,
colour = "blue") +
geom_point(data = temp_filt[count, ], aes(x = long,
y = lat),
alpha = 0.5, fill = "red", size = 3, colour = "red")
print(p)
start = count
}
}
}else if (plot_period == "weekly"){
for (count in 2:nrow(temp_filt)){
if(interval(temp_filt$time[start], temp_filt$time[count])/dweeks(1) >= 1){
word_occurances <- unlist(browse_summary %>%
filter(time >= temp_filt$time[start] &
time <= temp_filt$time[count]) %>%
select(words))
word_occurances <- data_frame(words = word_occurances)
# word_occurances <- unlist(word_occurances)
# word_occurances_freq <- as_data_frame(table(word_occurances[word_occurances %in% top_words]))
p <- ggmapdata +
geom_point(data = temp_filt[1:count, ], aes(x = long,
y = lat),
fill = "light blue", size = 2, alpha = alpha,
colour = "blue") +
geom_point(data = temp_filt[count, ], aes(x = long,
y = lat),
alpha = 0.5, fill = "red", size = 3, colour = "red")
word_freq <- ggplot(data = word_occurances, aes(x = words)) +
geom_bar() +
theme(axis.ticks.x =element_blank(), axis.text.x=element_blank())
p <- plot_grid(p, word_freq, ncol = 2)
print(word_freq)
start = count
}
}
}else if (plot_period == "annually"){
for (count in 1:nrow(temp_filt)){
if(interval(temp_filt$time[start], temp_filt$time[count])/dyears(1) >= 1){
p <- ggmapdata +
geom_point(data = temp_filt[1:count, ], aes(x = long,
y = lat),
fill = "light blue", size = 2, alpha = alpha,
colour = "blue") +
geom_point(data = temp_filt[count, ], aes(x = long,
y = lat),
alpha = 0.5, fill = "red", size = 3, colour = "red")
print(p)
start = count
}
}
}
browse_summary <- readRDS(file = "../data/R_temp/browse_summary.rds")
location_summary <- readRDS(file = "../data/R_temp/location_summary.rds")
stop_words <- read_csv(stop_words_url)
# filter for Google Search and cleaning
browse_summary <- browse_summary %>%
filter(str_detect(title, " - Google Search$")) %>%
mutate(title = str_sub(title, 1, str_locate(title, " - Google Search")[ ,1] - 1)) %>%
distinct(ymd = str_sub(time, 1, 13), title, .keep_all = TRUE) %>%
group_by(time) %>%
mutate(words = list(words = unlist(str_split(title, pattern = " "))[!(unlist(str_split(title, pattern = " ")) %in% unlist(stop_words$words))]),
ymd = NULL)
top_words <- as_data_frame(table(unlist(browse_summary$words))) %>%
top_n(n, n = n_words)
# top_n(10, beta) %>%
# ungroup() %>%
# arrange(topic, -beta)
# location_summary <- location_summary
mapData <- get_googlemap(location, zoom = zoom)
borders <- attr(mapData, which = "bb")
if (borders$ll.lon == borders$ur.lon){
borders$ll.lon == borders$ll.lon - 0.05
borders$ur.lon == borders$ur.lon + 0.05
}else{
borders$ll.lat == borders$ll.lat - 0.05
borders$ur.lat == borders$ur.lat + 0.05
}
location_summary <- location_summary %>%
filter(long <= borders$ur.lon &
long >= borders$ll.lon &
lat <= borders$ur.lat &
lat >= borders$ll.lat)
# zoom <- floor(10/max((max(location_summary$long) - min(location_summary$long)/(borders$ur.lon - borders$ll.lon)),
#              (max(location_summary$lat) - min(location_summary$lat))/(borders$ur.lat - borders$ll.lat)))
# center <- c(min(location_summary$long) + (max(location_summary$long) - min(location_summary$long))/2,
#            min(location_summary$lat) + (max(location_summary$lat) - min(location_summary$lat))/2)
center <- c(median(location_summary$long), median(location_summary$lat))
# mapData <- get_googlemap(center = center, zoom = zoom)
# borders <- attr(mapData, which = "bb")
mapplot <- ggmap(get_googlemap(center = center, zoom = zoom), extent = "device")
lon_breaks <- mapplot$data$lon
lat_breaks <- mapplot$data$lat
mapplot <- mapplot +
theme(axis.line=element_blank(),
axis.text.x=element_blank(),
axis.text.y=element_blank(),
axis.ticks=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank())
png(filename = "../results/base_map.png")
print(mapplot)
dev.off()
base_map <- readPNG(source = "../results/base_map.png")
ggmapdata <- rasterGrob(base_map, interpolate=TRUE)
ggmapdata <- qplot(x = lon_breaks,
y = lat_breaks,
xlim = c(min(lon_breaks), max(lon_breaks)),
ylim = c(min(lat_breaks), max(lat_breaks)),
geom="blank") +
annotation_custom(ggmapdata, xmin=-Inf, xmax=Inf, ymin=-Inf, ymax=Inf)
temp_filt <- location_summary
start = 1
start_plot = 1
lat_start = 0
long_start = 0
# plot_seq <- seq(period, nrow(temp_filt), 1)
temp = data_frame()
p <- ggmapdata
print(p)
if (plot_period == "daily"){
for (count in 1:nrow(temp_filt)){
if(interval(temp_filt$time[start], temp_filt$time[count])/ddays(1) >= 1){
searches <- paste(browse_summary$title)
p <- ggmapdata +
geom_point(data = temp_filt[1:count, ], aes(x = long,
y = lat),
fill = "light blue", size = 2,
alpha = alpha,
colour = "blue") +
geom_point(data = temp_filt[count, ], aes(x = long,
y = lat),
alpha = 0.5, fill = "red", size = 3, colour = "red")
print(p)
start = count
}
}
}else if (plot_period == "weekly"){
for (count in 2:nrow(temp_filt)){
if(interval(temp_filt$time[start], temp_filt$time[count])/dweeks(1) >= 1){
word_occurances <- unlist(browse_summary %>%
filter(time >= temp_filt$time[start] &
time <= temp_filt$time[count]) %>%
select(words))
word_occurances <- unlist(table(word_occurances))
# word_occurances <- data_frame(words = word_occurances)
tops <- data_frame(cats = top_words$Var1)
tops$freq <- sapply(tops$cats, function(x) if_else(any(names(word_occurances) %in% x), word_occurances[x], 0))
# word_occurances <- unlist(word_occurances)
# word_occurances_freq <- as_data_frame(table(word_occurances[word_occurances %in% top_words]))
p <- ggmapdata +
geom_point(data = temp_filt[1:count, ], aes(x = long,
y = lat),
fill = "light blue", size = 2, alpha = alpha,
colour = "blue") +
geom_point(data = temp_filt[count, ], aes(x = long,
y = lat),
alpha = 0.5, fill = "red", size = 3, colour = "red")
word_freq <- ggplot(data = tops, aes(x = cats, y = freq)) +
geom_col() +
theme(axis.ticks.x =element_blank(), axis.text.x=element_blank())
p <- plot_grid(p, word_freq, ncol = 2)
print(word_freq)
start = count
}
}
}else if (plot_period == "annually"){
for (count in 1:nrow(temp_filt)){
if(interval(temp_filt$time[start], temp_filt$time[count])/dyears(1) >= 1){
p <- ggmapdata +
geom_point(data = temp_filt[1:count, ], aes(x = long,
y = lat),
fill = "light blue", size = 2, alpha = alpha,
colour = "blue") +
geom_point(data = temp_filt[count, ], aes(x = long,
y = lat),
alpha = 0.5, fill = "red", size = 3, colour = "red")
print(p)
start = count
}
}
}
word_occurances
names(word_occurances)
names(word_occurances) %in% tops$cats[1]
any(names(word_occurances) %in% tops$cats[1])
source('~/Personal Study/Google_Location_Analysis/src/data_visualization.R', echo=TRUE)
View(tops)
source('~/Personal Study/Google_Location_Analysis/src/data_visualization.R', echo=TRUE)
source('~/Personal Study/Google_Location_Analysis/src/data_visualization.R', echo=TRUE)
source('~/Personal Study/Google_Location_Analysis/src/data_visualization.R', echo=TRUE)
source('~/Personal Study/Google_Location_Analysis/src/data_visualization.R', echo=TRUE)
source('~/Personal Study/Google_Location_Analysis/src/data_visualization.R', echo=TRUE)
source('~/Personal Study/Google_Location_Analysis/src/data_visualization.R', echo=TRUE)
source('~/Personal Study/Google_Location_Analysis/src/data_visualization.R', echo=TRUE)
source('~/Personal Study/Google_Location_Analysis/src/data_visualization.R', echo=TRUE)
source('~/Personal Study/Google_Location_Analysis/src/data_visualization.R', echo=TRUE)
source('~/Personal Study/Google_Location_Analysis/src/data_visualization.R', echo=TRUE)
source('~/Personal Study/Google_Location_Analysis/src/data_visualization.R', echo=TRUE)
source('~/Personal Study/Google_Location_Analysis/src/data_visualization.R', echo=TRUE)
source('~/Personal Study/Google_Location_Analysis/src/data_visualization.R', echo=TRUE)
ymd(browse_summary$time[1])
substr(browse_summary$time[1], 1, 10)
source('~/Personal Study/Google_Location_Analysis/src/data_visualization.R', echo=TRUE)
source('~/Personal Study/Google_Location_Analysis/src/data_visualization.R', echo=TRUE)
source('~/Personal Study/Google_Location_Analysis/src/data_visualization.R', echo=TRUE)
source('~/Personal Study/Google_Location_Analysis/src/data_visualization.R', echo=TRUE)
source('~/Personal Study/Google_Location_Analysis/src/report_render.R', echo=TRUE)
source('~/Personal Study/Google_Location_Analysis/src/report_render.R', echo=TRUE)
source('~/Personal Study/Google_Location_Analysis/src/report_render.R', echo=TRUE)
source('~/Personal Study/Google_Location_Analysis/src/report_render.R', echo=TRUE)
source('~/Personal Study/Google_Location_Analysis/src/report_render.R', echo=TRUE)
source('~/Personal Study/Google_Location_Analysis/src/report_render.R', echo=TRUE)
source('~/Personal Study/Google_Location_Analysis/src/report_render.R', echo=TRUE)
source('~/Personal Study/Google_Location_Analysis/src/report_render.R', echo=TRUE)
source('~/Personal Study/Google_Location_Analysis/src/report_render.R', echo=TRUE)
knitr::opts_chunk$set(echo = TRUE)
read_file("anim.html")
paste0(read_file("anim.html"))
htmltools::includeHTML("anim.html")
source('~/Personal Study/Google_Location_Analysis/src/report_render.R', echo=TRUE)
source('~/Personal Study/Google_Location_Analysis/src/report_render.R', echo=TRUE)
source('~/Personal Study/Google_Location_Analysis/src/report_render.R', echo=TRUE)
source('~/Personal Study/Google_Location_Analysis/src/report_render.R', echo=TRUE)
source('~/Personal Study/Google_Location_Analysis/src/report_render.R', echo=TRUE)
source('~/Personal Study/Google_Location_Analysis/src/report_render.R', echo=TRUE)
source('~/Personal Study/Google_Location_Analysis/src/data_visualization.R', echo=TRUE)
source('~/Personal Study/Google_Location_Analysis/src/data_visualization.R', echo=TRUE)
source('~/Personal Study/Google_Location_Analysis/src/data_visualization.R', echo=TRUE)
source('~/Personal Study/Google_Location_Analysis/src/data_visualization.R', echo=TRUE)
source('~/Personal Study/Google_Location_Analysis/src/data_visualization.R', echo=TRUE)
source('~/Personal Study/Google_Location_Analysis/src/report_render.R', echo=TRUE)
source('~/Personal Study/Google_Location_Analysis/src/report_render.R', echo=TRUE)
source('~/Personal Study/Google_Location_Analysis/src/data_visualization.R', echo=TRUE)
source('~/Personal Study/Google_Location_Analysis/src/report_render.R', echo=TRUE)
